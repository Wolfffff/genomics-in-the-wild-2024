import os
import re


target_dir = "/Genomics/ayroleslab2/shared/genomics-in-the-wild-2024/data/giw2024/demultiplexed_bees"
mydir = "."
classifier = "bin/2022.10.backbone.v4.nb.qza"
metadata = "qiime_metadata.tsv"
file_names = [f for f in os.listdir(target_dir) if f.endswith("R1_001.fastq.gz")]

# Extract the sample names from the file names
samples = ["_".join(f.split("_")[:3]) for f in file_names]


rule all:
    input:
        "results/phyloseq/tree.nwk",
        "results/qiime/giw2024-table.qza",
        "results/qiime/giw2024-taxonomy.qza",
        "results/qiime/giw2024-taxa-bar-plots.qzv",
        "results/phyloseq/otu_table.txt",
        "results/phyloseq/taxonomy.tsv",
        "results/qiime/giw2024-stats.qzv",  # Add this if you have a rule generating denoise stats visualization
        "results/qiime/giw2024-rep-seqs.qzv",  # Output from tabulate_seqs rule
        "results/qiime/giw2024-rooted-tree.qza",  # Output from phylogeny_tree rule
        fastqc_output=expand("results/fastqc{sample}_fastqc.html", sample=glob_wildcards("results/trimmed{sample}.fastq.gz").sample),
        trimmed_reads=expand("results/trimmed{sample}.fastq.gz", sample=glob_wildcards(f"{target_dir}{{sample}}.fastq.gz").sample)

rule trim_reads:
    input:
        fastq=f"{target_dir}{{sample}}.fastq.gz",
        adapters="data/MiSeq_SEadapters.fa"
    output:
        trimmed="results/trimmed{sample}.fastq.gz"
    shell:
        """
        trimmomatic SE {input.fastq} {output.trimmed} -threads 4 LEADING:19 ILLUMINACLIP:{input.adapters}:2:30:10 SLIDINGWINDOW:4:20
        """

rule fastqc:
    input:
        "results/trimmed/{sample}.fastq.gz"
    output:
        "results/fastqc/{sample}_fastqc.html"
    shell:
        """
        fastqc {input} -o results/fastqc/
        """

rule create_qiime_manifest:
    input:
        # Assuming forward and reverse reads are placed in the same directory and follow the naming convention you've provided
        fwd_samples=expand("results/trimmed/{sample}_R1_001.fastq.gz", sample=samples),
    output:
        manifest_file="results/qiime_sample_manifest.txt"
    run:
        
        with open(output.manifest_file, "w") as manifest:
            manifest.write("sample-id\tforward-absolute-filepath\treverse-absolute-filepath\n")
            # Assuming sample names are consistent between fwd and rev reads
            sample_names = [os.path.basename(f).split("_R1_001.fastq.gz")[0] for f in input.fwd_samples]
            for sample_name in sample_names:
            # Remove NUMBERS__ from front

                fwd_path = os.path.abspath(f"results/trimmed/{sample_name}_R1_001.fastq.gz")
                rev_path = os.path.abspath(f"results/trimmed/{sample_name}_R2_001.fastq.gz")
                sample_name = re.sub(r"^\d+__", "", sample_name)
                manifest.write(f"{sample_name}\t{fwd_path}\t{rev_path}\n")

rule qiime_import:
    input:
        manifest="results/qiime_sample_manifest.txt"
    output:
        qza="results/qiime/demux-single-end.qza"
    conda:
        "envs/qiime2-amplicon-2024.2-py38-linux-conda.yml"
    shell:
        """
        qiime tools import \
        --type 'SampleData[PairedEndSequencesWithQuality]' \
        --input-path {input.manifest} \
        --input-format PairedEndFastqManifestPhred33V2 \
        --output-path {output.qza}
        """

rule qiime_demux_summarize:
    input:
        qza="results/qiime/demux-single-end.qza"
    output:
        qzv="results/qiime/demux-single-end.qzv"
    shell:
        """
        qiime demux summarize \
        --i-data {input.qza} \
        --o-visualization {output.qzv}
        """

rule denoise:
    input:
        qza="results/qiime/demux-single-end.qza"
    output:
        rep_seqs="results/qiime/giw2024-rep-seqs.qza",
        table="results/qiime/giw2024-table.qza",
        stats="results/qiime/giw2024-stats.qza"
    conda:
        "envs/qiime2-amplicon-2024.2-py38-linux-conda.yml"
    shell:
        """
        qiime dada2 denoise-single \
        --i-demultiplexed-seqs {input.qza} \
        --p-trunc-len 250 \
        --p-n-threads {threads} \
        --o-representative-sequences {output.rep_seqs} \
        --o-table {output.table} \
        --o-denoising-stats {output.stats}
        """

rule qiime_denoise_stats:
    input:
        stats="results/qiime/giw2024-stats.qza"
    output:
        stats_viz="results/qiime/giw2024-stats.qzv"
    conda:
        "envs/qiime2-amplicon-2024.2-py38-linux-conda.yml"
    shell:
        """
        qiime metadata tabulate \
        --m-input-file {input.stats} \
        --o-visualization {output.stats_viz}
        """

rule tabulate_seqs:
    input:
        rep_seqs="results/qiime/giw2024-rep-seqs.qza"
    output:
        rep_seqs_viz="results/qiime/giw2024-rep-seqs.qzv"
    conda:
        "envs/qiime2-amplicon-2024.2-py38-linux-conda.yml"
    shell:
        """
        qiime feature-table tabulate-seqs \
        --i-data {input.rep_seqs} \
        --o-visualization {output.rep_seqs_viz}
        """

rule phylogeny_tree:
    input:
        rep_seqs="results/qiime/giw2024-rep-seqs.qza"
    output:
        aligned_rep_seqs="results/qiime/giw2024-aligned-rep-seqs.qza",
        masked_aligned_rep_seqs="results/qiime/giw2024-masked-aligned-rep-seqs.qza",
        unrooted_tree="results/qiime/giw2024-unrooted-tree.qza",
        rooted_tree="results/qiime/giw2024-rooted-tree.qza"
    conda:
        "envs/qiime2-amplicon-2024.2-py38-linux-conda.yml"
    shell:
        """
        qiime phylogeny align-to-tree-mafft-fasttree \
        --i-sequences {input.rep_seqs} \
        --o-alignment {output.aligned_rep_seqs} \
        --o-masked-alignment {output.masked_aligned_rep_seqs} \
        --o-tree {output.unrooted_tree} \
        --o-rooted-tree {output.rooted_tree}
        """


rule classify:
    input:
        rep_seqs="results/qiime/giw2024-rep-seqs.qza"
    output:
        taxonomy="results/qiime/giw2024-taxonomy.qza"
    conda:
        "envs/qiime2-amplicon-2024.2-py38-linux-conda.yml"
    shell:
        """
        qiime feature-classifier classify-sklearn \
        --i-classifier {classifier} \
        --i-reads {input.rep_seqs} \
        --p-n-jobs {threads} \
        --o-classification {output.taxonomy}
        """

rule qiime_taxa_barplot:
    input:
        table="results/qiime/giw2024-table.qza",
        taxonomy="results/qiime/giw2024-taxonomy.qza",
        metadata=metadata
    output:
        barplot="results/qiime/giw2024-taxa-bar-plots.qzv"
    conda:
        "envs/qiime2-amplicon-2024.2-py38-linux-conda.yml"
    shell:
        """
        qiime taxa barplot \
        --i-table {input.table} \
        --i-taxonomy {input.taxonomy} \
        --m-metadata-file {input.metadata} \
        --o-visualization {output.barplot}
        """

rule export_otu_table:
    input:
        table="results/qiime/giw2024-table.qza"
    output:
        otu_table="results/phyloseq/otu_table.txt"
    conda:
        "envs/qiime2-amplicon-2024.2-py38-linux-conda.yml"
    shell:
        """
        qiime tools export \
        --input-path {input.table} \
        --output-path results/phyloseq/
        biom convert -i results/phyloseq/feature-table.biom -o {output.otu_table} --to-tsv
        """

rule export_taxonomy:
    input:
        taxonomy="results/qiime/giw2024-taxonomy.qza"
    output:
        taxonomy_tsv="results/phyloseq/taxonomy.tsv"
    conda:
        "envs/qiime2-amplicon-2024.2-py38-linux-conda.yml"
    shell:
        """
        qiime tools export \
        --input-path {input.taxonomy} \
        --output-path results/phyloseq/
        """

rule export_tree:
    input:
        tree="results/qiime/giw2024-rooted-tree.qza"
    output:
        tree_export="results/phyloseq/tree.nwk"
    conda:
        "envs/qiime2-amplicon-2024.2-py38-linux-conda.yml"
    shell:
        """
        qiime tools export \
        --input-path {input.tree} \
        --output-path results/phyloseq/
        """

# This rule assumes that the taxonomy export generates a TSV file directly, which might need adjustment.
# You may need to format the taxonomy.tsv file appropriately for Phyloseq after exporting.
